/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { Context } from "./../src/types/Context"
import type { core } from "nexus"
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    /**
     * The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
     */
    json<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "JSON";
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    datetime<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "DateTime";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    /**
     * The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
     */
    json<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "JSON";
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    datetime<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "DateTime";
  }
}


declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  blockElementInput: { // input type
    children: Array<NexusGenInputs['customTextInput'] | null>; // [customTextInput]!
    type: string; // String!
  }
  createDocumentInput: { // input type
    value: Array<NexusGenInputs['blockElementInput'] | null>; // [blockElementInput]!
  }
  customTextInput: { // input type
    bold?: boolean | null; // Boolean
    italic?: boolean | null; // Boolean
    placeholder?: string | null; // String
    strikethrough?: boolean | null; // Boolean
    text: string; // String!
    underline?: boolean | null; // Boolean
  }
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  DateTime: any
  JSON: any
}

export interface NexusGenObjects {
  Document: { // root type
    createAt?: NexusGenScalars['DateTime'] | null; // DateTime
    id: string; // ID!
    value: Array<NexusGenRootTypes['blockElement'] | null>; // [blockElement]!
  }
  Mutation: {};
  Query: {};
  blockElement: { // root type
    children: Array<NexusGenRootTypes['customText'] | null>; // [customText]!
    type: string; // String!
  }
  customText: { // root type
    bold?: boolean | null; // Boolean
    italic?: boolean | null; // Boolean
    placeholder?: string | null; // String
    strikethrough?: boolean | null; // Boolean
    text: string; // String!
    underline?: boolean | null; // Boolean
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  Document: { // field return type
    createAt: NexusGenScalars['DateTime'] | null; // DateTime
    id: string; // ID!
    value: Array<NexusGenRootTypes['blockElement'] | null>; // [blockElement]!
  }
  Mutation: { // field return type
    createDocument: NexusGenRootTypes['Document'] | null; // Document
    deleteDocumentById: NexusGenRootTypes['Document'] | null; // Document
    updateDocumentById: NexusGenRootTypes['Document'] | null; // Document
  }
  Query: { // field return type
    Document: NexusGenRootTypes['Document'] | null; // Document
    documents: Array<NexusGenRootTypes['Document'] | null>; // [Document]!
  }
  blockElement: { // field return type
    children: Array<NexusGenRootTypes['customText'] | null>; // [customText]!
    type: string; // String!
  }
  customText: { // field return type
    bold: boolean | null; // Boolean
    italic: boolean | null; // Boolean
    placeholder: string | null; // String
    strikethrough: boolean | null; // Boolean
    text: string; // String!
    underline: boolean | null; // Boolean
  }
}

export interface NexusGenFieldTypeNames {
  Document: { // field return type name
    createAt: 'DateTime'
    id: 'ID'
    value: 'blockElement'
  }
  Mutation: { // field return type name
    createDocument: 'Document'
    deleteDocumentById: 'Document'
    updateDocumentById: 'Document'
  }
  Query: { // field return type name
    Document: 'Document'
    documents: 'Document'
  }
  blockElement: { // field return type name
    children: 'customText'
    type: 'String'
  }
  customText: { // field return type name
    bold: 'Boolean'
    italic: 'Boolean'
    placeholder: 'String'
    strikethrough: 'Boolean'
    text: 'String'
    underline: 'Boolean'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    createDocument: { // args
      input: NexusGenInputs['createDocumentInput']; // createDocumentInput!
    }
    deleteDocumentById: { // args
      id: string; // String!
    }
    updateDocumentById: { // args
      id: string; // String!
      value: NexusGenScalars['JSON']; // JSON!
    }
  }
  Query: {
    Document: { // args
      id: string; // String!
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = keyof NexusGenInputs;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}